package com.ymt.manage;

import com.ymt.manage.utility.ZLibUtility;
import com.ymt.manage.utility.security.AesUtility;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * @Description TODO
 * @Author yangmingtian
 * @Date 2019/5/6
 */
@RunWith(SpringRunner.class)
@SpringBootTest
public class test {

    @Autowired
    private AesUtility aesUtility;

    @Test
    public void test() throws Exception {
//        String s = aesUtility.decrypt(new String(ZLibUtility.decompress("".getBytes())), "www");
//        System.out.println(s);
        String encrypt = aesUtility.encrypt("ymt", "www");
        System.out.println(encrypt);
        System.out.println(aesUtility.decrypt(encrypt,"www"));
    }

    public static void main(String[] args) {
        byte[] compress = ZLibUtility.compress("ddd".getBytes());
        System.out.println(new String(ZLibUtility.decompress(compress)));
    }
}
